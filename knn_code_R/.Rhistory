install.packages('matrix')
install.packages('Matrix')
library('Matrix')
library(ada)
?adaboost.MM
install.packages('adabag')
library('adabag')
install.packages('ggplot2')
install.packages('reshape2')
install.packages('plyr')
install.packages("plyr")
install.packages('plyr)')
install.packages("plyr")
setwd("~/Documents/Rice/senior/HashTagSwipeRight/knn_code_R")
library("Matrix")
rating_file = '../data/ratings.csv'
id_file = '../data/IDMap.csv'
ratings = read.table(rating_file, header=TRUE,sep=",")
idmap = read.table(id_file, header=TRUE,sep=",")
rmat = sparseMatrix(i=ratings[,1],j=ratings[,2],x=ratings[,3])
rmat_na <- as.matrix(rmat)
rmat_na[which(rmat_na=0)] = NA
rmat_na[which(rmat_na==0)] = NA
library(cluster)
?daisy
D = daisy(rmat_na)
D[1,2]
dim(D)
dim(D)
D[1]
D[2]
D[3]
length(D)
10000*(10000-1)/2
length(which(D==NA))
length(which(D==0))
length(which(rmat==0))
length(which(rmat==NA))
length(which(rmat_na==0))
length(which(rmat_na==NA))
NA + 4
rmat_na[1,60]
rmat_na[1,59]
idmap[1,]
rmat_na[1,38]
which(rmat_na==NA)
head(rmat_na)
summary(D)
dist_mat = D
length(D==0)
which(D==0)
length(which(D==0))
Dp = dist(rmat_na)
typeof(Dp)
length(which(dist_mat==NA))
length(which(dist_mat==0))
dist_mat2 = Dp
head(dist_mat)
dist_mat[1]
dist_mat[1,1]
head(dist_mat2)
length(dist_mat2[which(dist_mat2==NA)])
length(dist_mat2[which(dist_mat2==0)])
dist_mat2[1,2]
min(dist_mat)
which(dist_mat==NA)
View(dist_mat)
a = as.matrix(dist_mat)
dim(a)
.Machine$double.eps
length(is.na(dist_mat))
length(dist_mat[is.na(dist_mat)])
dist_mat[which(dist_mat==0)] = .Machine$double.eps
dist_mat[is.na(dist_mat)] = 0
length(dist_mat==0)
length(dist_mat[dist_mat==0])
R = sparseMatrix(dist_mat, symmetric=TRUE)
R = sparseMatrix(x=dist_mat, symmetric=TRUE)
a = [1,2,3,4,5,3,4,2,5,2]
a = c(1,2,3,4,5,3,4,2,5,2)
which(a==3,arr.ind=TRUE)
head(which(dist_mat!=0, arr.ind=TRUE))
length(which(dist_mat!=0, arr.ind=FALSE))
.Machine$double.eps == 0
.Machine$double.eps*0.1 == 0
.Machine$double.eps*0.00001 == 0
i = c(1,1,2,2,3,5)
j = c(1,2,3,2,1,2)
d = c(1,2,3,0,0,3)
a = sparseMatrix(i,j,d)
a = sparseMatrix(i=i,j=j,x=d)
a
?is.na
values = dist_mat2[!is.na(dist_mat2)]
length(values)
rm(list=ls())
rating_file = '../data/ratings.csv'
id_file = '../data/IDMap.csv'
ratings = read.table(rating_file, header=TRUE,sep=",")
idmap = read.table(id_file, header=TRUE,sep=",")
# create sparse matrix
rmat = sparseMatrix(i=ratings[,1],j=ratings[,2],x=ratings[,3])
# create sparse distance matrix
rmat_na <- as.matrix(rmat)
rmat_na[which(rmat_na==0)] = NA # rmat_na has NA where rating is unobserved
D = daisy(rmat_na) # D_na is a distance matrix with NA where distance is undefined
ind =  which(!is.na(D), arr.ind=TRUE) # indices with
length(ind)
ind =  which(is.na(D), arr.ind=TRUE) # indices with
length(ind)
length(D)
na_ind = ind
ind =  which(!is.na(D), arr.ind=TRUE) # indices with
length(na_ind) + length(ind)
total = length(na_ind) + length(ind)
length(ind) / total
rmat[1,]
length(which(rmat[4,]!=0, arr.ind=TRUE))
intersect(rmat[1,], rmat[2,])
intersect(which(rmat[1,]!=, arr.ind=TRUE), which(rmat[2,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[2,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[3,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[4,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[5,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[6,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[7,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[8,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[9,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[10,]!=0, arr.ind=TRUE))
intersect(which(rmat[1,]!=0, arr.ind=TRUE), which(rmat[11,]!=0, arr.ind=TRUE))
intersect(which(rmat[11,]!=0, arr.ind=TRUE), which(rmat[1,]!=0, arr.ind=TRUE))
intersect(which(rmat[11,]!=0, arr.ind=TRUE), which(rmat[2,]!=0, arr.ind=TRUE))
intersect(which(rmat[11,]!=0, arr.ind=TRUE), which(rmat[3,]!=0, arr.ind=TRUE))
intersect(which(rmat[11,]!=0, arr.ind=TRUE), which(rmat[4,]!=0, arr.ind=TRUE))
C = rep(0.0, length(D))
for (i in 1:(size-1)){
for (j in (i+1):size){
cat("(",i,",",j,")\n")
ind = size*(i-1) - i*(i-1)/2 + j-i
if(!is.na(D[ind])){
C[ind] = length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[j,]!=0, arr.ind=TRUE)))
}
} # for cols
} # for rows
size = 10000
n*(i-1) - i*(i-1)/2 + j-i
C = rep(0.0, length(D))
for (i in 1:(size-1)){
for (j in (i+1):size){
cat("(",i,",",j,")\n")
ind = size*(i-1) - i*(i-1)/2 + j-i
if(!is.na(D[ind])){
C[ind] = length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[j,]!=0, arr.ind=TRUE)))
}
} # for cols
} # for rows
ptm <- system.time()
ptm <- Sys.time()
time = Sys.time() - ptm
time
cat(time)
C = rep(0.0, length(D))
for (i in 1:(size-1)){
time <- Sys.time()
for (j in (i+1):size){
ind = size*(i-1) - i*(i-1)/2 + j-i
if(!is.na(D[ind])){
C[ind] = length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[j,]!=0, arr.ind=TRUE)))
}
} # for cols
time <- Sys.time() - time
cat("Row ",i,"took ",time," seconds\n")
} # for rows
i
j
ind
C[ind] = length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[j,]!=0, arr.ind=TRUE)))
ind
C[ind]
install.packages('foreach')
library(foreach)
x
x <- foreach(i in 1:5, .combine='c'){}
x <- foreach(i in 1:5, .combine='c'){rnorm(4)}
x <- foreach(i=1:5, .combine='c'){rnorm(4)}
x <- foreach(i=1:5, .combine='c') rnorm(4)
foreach(i=1:5) cat("Hello World")
foreach(i=1:5) %do% cat("Hello World")
x <- foreach(i=1:5, .combine='c') %do% rnorm(4)
x
install.packages('doMC')
library(doMC)
vignette('nested')
detectCores()
registerDoMC(cores=3)
rm(C)
C <-
foreach(i=1:(size-1), .combine='c') %:%
foreach(j=(i+1):size, .combine='c') %dopar% {
ind = size*(i-1) - i*(i-1)/2 + j-i
if(!is.na(D[ind])){
C = length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[j,]!=0, arr.ind=TRUE)))
} else {
C = 0
}
} # for cols
C <-
foreach(i=1:(size-1), .combine='c') %:%
foreach(j=(i+1):size, .combine='c') %dopar%
length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[j,]!=0, arr.ind=TRUE)))
C[1]
registerDoMC(cores=2)
rmat!=0
