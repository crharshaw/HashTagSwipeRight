install.packages('matrix')
install.packages('Matrix')
library('Matrix')
library(ada)
?adaboost.MM
install.packages('adabag')
library('adabag')
install.packages('ggplot2')
install.packages('reshape2')
install.packages('plyr')
install.packages("plyr")
install.packages('plyr)')
install.packages("plyr")
library("Matrix")
library('cluster')
# get data
rating_file = '../data/ratings.csv'
id_file = '../data/IDMap.csv'
dist_file = '../'
ratings = read.table(rating_file, header=TRUE,sep=",")
idmap = read.table(id_file, header=TRUE,sep=",")
size = 10000
# create sparse matrix
rmat = sparseMatrix(i=ratings[,1],j=ratings[,2],x=ratings[,3])
# create sparse distance matrix
rmat_na <- as.matrix(rmat)
rmat_na[which(rmat_na==0)] = NA # rmat_na has NA where rating is unobserved
D = daisy(rmat_na) # D_na is a distance matrix with NA where distance is undefined
library("Matrix")
library('cluster')
rating_file = '../data/ratings.csv'
id_file = '../data/IDMap.csv'
ratings = read.table(rating_file, header=TRUE,sep=",")
setwd("~/Documents/Rice/senior/HashTagSwipeRight/knn_code_R")
rm(list=ls())
library("Matrix")
library('cluster')
# get data
rating_file = '../data/ratings.csv'
id_file = '../data/IDMap.csv'
ratings = read.table(rating_file, header=TRUE,sep=",")
idmap = read.table(id_file, header=TRUE,sep=",")
size = 10000
# create sparse matrix
rmat = sparseMatrix(i=ratings[,1],j=ratings[,2],x=ratings[,3])
# create sparse distance matrix
rmat_na <- as.matrix(rmat)
rmat_na[which(rmat_na==0)] = NA # rmat_na has NA where rating is unobserved
D = daisy(rmat_na) # D_na is a distance matrix with NA where distance is undefined
f = as.vector(D)
f[1]
distance <- data.frame(d = as.vector(D))
rm(f)
distance$lab <- 'distances'
ggplot(distance, aes(d, fill = lab)) + geom_density(alpha = 0.2) + labs(title="Distribution of Distances", x="Distances", y="Density")
library('ggplot2')
ggplot(distance, aes(d, fill = lab)) + geom_density(alpha = 0.2) + labs(title="Distribution of Distances", x="Distances", y="Density")
data = list(idmap=idmap, rmat=rmat, ratings=ratings, D=D)
saveRDS(data, file="data.RDS")
count = 0
num_points = 10000
common = rep(0,num_points)
d = rep(0,num_points)
while(count < num_points){
# select random indices
ind = sample(1:size, 2)
i = min(ind)
j = max(ind)
# compute common entries and distance
if(i!=j){
com = length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[j,]!=0, arr.ind=TRUE)))
if(com!=0){
count = count+1
d[count] = D[size*(i-1) - i*(i-1)/2 + j-i]
common[count] = com
}
}
}
length(common)
plot(common, d, main='Common Ratings vs Distance', xlab='Commonly Rated Profiles', ylab='Distances', pch=19)
max(common)
ind = which(common<20, arr.ind=TRUE)
plot(common[ind], d[ind], main='Common Ratings vs Distance', xlab='Commonly Rated Profiles', ylab='Distances', pch=19)
ind = which(common==1, arr.ind=TRUE)
length(ind)
plot(common[ind], d[ind], main='Common Ratings vs Distance', xlab='Commonly Rated Profiles', ylab='Distances', pch=19)
max(d[ind])
min(d[ind])
unique(d[ind])
max(D)
max(D[!is.na(D)])
min(D[!is.na(D)])
min(D[which(D[!is.na(D)]!=0)])
length(D[!is.na(D)])
length(D[is.na(D)])
den = length(D[!is.na(D)]) / length(D)
sprintf('Distance Matrix D is %.3f%% dense',den*100)
nrow(r_mat)
nrow(rmat)
d = sample.int(20,10)
d
sort(d, partial=5, na.last=NA, index.return=TRUE)
sort(d, partial=5, index.return=TRUE)
sort(d, partial=5, na.last=NA)
is.numeric(d)
a = c(1,2,3,4,5_)
a = c(1,2,3,4,5)
b = c(6,78,9,10)
t(a)
t(a) %*% b
a %*% t(b)
t(a) %*% b
b = c(6,7,8,9,10)
t(a) %*% b
ind = [1,49]
rmat[1,49]
rmat[1,60]
rmat[1,59]
rmat[1,2]
i = ind[1]
j = ind[2]
n = n_row(rmat)
n = nrow(rmat)
library(foreach)
d_low <- foreach(m=1:(i-1), .combine='c') %dopar% D[nn*(m-1) - m*(m-1)/2 + i-m] # m < i
d_low <- foreach(m=1:(i-1), .combine='c') %dopar% D[n*(m-1) - m*(m-1)/2 + i-m] # m < i
d_high <- foreach(m=(i+1), .combine='c') %dopar% D[n*(i-1) - i*(i-1)/2 + m-i] # i < m
d = c(d_low,d_high)
k = 6
neighbors = rep(0,k)
distances = rep(0,k)
count = 1
candidates = which(d==min(d),arr.ind=TRUE)
candidates
min(d)
which(d==min(d))
min(d, na.rm=TRUE)
candidates = which(d==min(d, na.rm=TRUE),arr.ind=TRUE)
length(candidates)
com = length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[cand,]!=0, arr.ind=TRUE)))
cand = candidates[0]
cand = candidates[1]
cand
d[1]
d[2]
d[3]
d[4]
d[5]
d[6]
d[7]
d[8]
d[9]
d[!is.na(d)]
com = length(intersect(which(rmat[i,]!=0, arr.ind=TRUE), which(rmat[cand,]!=0, arr.ind=TRUE)))
com
a
a = c(NA,NA,Inf,NA)
min(a)
min(a, na.rm=TRUE)
which.max(a, na.rm=TRUE)
max(a)
a[!is.na(a)]
a = a[!is.na(a)]
a
source('knn.R')
idmap[1,]
knn_impute_single(rmat, D, ind=c(1,38), k=4)
d
ind
idmap[1,]
ind=c(1,38)
i = ind[1]
j = ind[2]
i
j
n = nrow(rmat)
d_low <- foreach(m=1:(i-1), .combine='c') %dopar% D[n*(m-1) - m*(m-1)/2 + i-m] # m < i
ind
i
j
m = 1:(i-1)
d_low = D[n*(m-1) - m*(m-1)/2 + i-m]
m2 = (i+1):n
d_high = D[n*(i-1) - i*(i-1)/2 + m-i]
d = c(d_low, d_high)
neighbors = sort(d, na.last=NA, index.return=TRUE)[1:k]
saveRDS(list(d=d),"d_vec_ind_1_38.RDS")
k=5
for(m in 1:k){
neighbor[k] = which.min(d)
distance = d[neighbor[k]]
d = d[-neighbor[k]]
}
neighbor = rep(0,k)
distance = rep(0,k)
for(m in 1:k){
neighbor[k] = which.min(d)
distance = d[neighbor[k]]
d = d[-neighbor[k]]
}
installed.packages('softImpute')
install.packages('softImpute')
library('softImpute')
i = c(1,2,3,4,5,6,8)
j = c(3,5,2,6,3,7,4)
d = c(1,2,3,4,5,6,7)
X = Incomplete(i,j,d)
X
obj = softImpute(X,rank.max=4, lambda=0.2)
obj
A = complete(obj)
A
