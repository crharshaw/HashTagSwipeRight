install.packages('matrix')
install.packages('Matrix')
library('Matrix')
library(ada)
?adaboost.MM
install.packages('adabag')
library('adabag')
install.packages('ggplot2')
install.packages('reshape2')
install.packages('plyr')
install.packages("plyr")
install.packages('plyr)')
install.packages("plyr")
setwd("~/Documents/Rice/senior/HashTagSwipeRight/softImpute_bootstrap")
source("softimputedriver.R")
ratings = read.csv("..\data\ratings.csv",header=TRUE,sep=",")
ratings = read.table("../data/ratings.csv",header=TRUE,sep=",")
source('softimputedriver.R')
lam_max<-matrix(,100,1)
for (k in 1:30) {
rand_row<-c(sample(1:n , size+100))
rand_col<-c(sample(1:n, size+100))
Y=M[rand_row, rand_col] #Y is the random submatrix
full_num<-which(Y!=0, arr.ind=TRUE)
mat_mean<-mean(Y[full_num])
Y[full_num]<-Y[full_num]-mat_mean
lam_max[k]<-lambda0(Y, maxit=200)
}
lambda_max<-min(lam_max)
lambda_num = 20
lambda_min = 1e-3
lambda_seq = rev(10^ seq(log10(lambda_min), log10(lambda_max), length.out=lambda_num))
log10(lambda_min)
log10(lambda_max)
lam_max
test_num = 100
lam_max<-matrix(,test_num,1)
for (k in 1:test_num) {
rand_row<-c(sample(1:n , size+100))
rand_col<-c(sample(1:n, size+100))
Y=M[rand_row, rand_col] #Y is the random submatrix
full_num<-which(Y!=0, arr.ind=TRUE)
mat_mean<-mean(Y[full_num])
Y[full_num]<-Y[full_num]-mat_mean
lam_max[k]<-lambda0(Y, maxit=200)
}
lambda_max<-min(lam_max)
lambda_max
lam_max
lambda_num = 20
lambda_min = 1e-3
lambda_seq = rev(10^ seq(log10(lambda_min), log10(lambda_max), length.out=lambda_num))
lambda_seq
kfold = 4
lam_best<-cross_val(M, ratings, size, 15, lambda_seq, kfold)
lam
lam_best
head(preds)
count=1
rank.max=20
lam=lam_best
rank.max=40
lam=lam_best
preds<-matrix(,dim(idmap)[1],1)
head(preds)
for (i in 1:(dim(idmap)[1]/100)) {
strt<-Sys.time()
cat(i, "\n")
miss_entry<-idmap[count:(count+99),c(1:2)]
y<-impute_single(M, miss_entry, size, iter, lam, rank.max)
preds[count:(count+99)]<-y
count=count+100
cat(Sys.time()-strt, "\n")
}
i=1
count
strt<-Sys.time()
cat(i, "\n")
miss_entry<-idmap[count:(count+99),c(1:2)]
y<-impute_single(M, miss_entry, size, iter, lam, rank.max)
preds[count:(count+99)]<-y
count=count+100
cat(Sys.time()-strt, "\n")
head(preds)
for (i in 1:(dim(idmap)[1]/100)) {
strt<-Sys.time()
cat(i, "\n")
miss_entry<-idmap[count:(count+99),c(1:2)]
y<-impute_single(M, miss_entry, size, iter, lam, rank.max)
preds[count:(count+99)]<-y
count=count+100
cat(Sys.time()-strt, "\n")
}
head(preds)
sd(preds)
sd(preds[!is.na(preds)])
